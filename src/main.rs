#![allow(while_true)]
#![feature(nll)]

use std::fs;
extern crate byteorder;
use byteorder::{ByteOrder, BigEndian};
use std::io;
use std::io::prelude::*;

mod ops;
mod formats;
mod vm;
mod container;

fn print42(sharp: &mut formats::Process) {
    let ci: u32 = sharp.stack.pop().unwrap() as u32;
    let c = std::char::from_u32(ci).unwrap();
    print!("{}", c);
    io::stdout().flush().ok().expect("Could not flush stdout");
}

fn write_hello_bin() {
    let hello : Vec<u64> = vec![
        0, 0, 10000000, 100000000, 0, 713, 0, 0, 0, 6, 0, 19, 6, 0, 6, 1, 21, 6, 425, 4, 6, 0, 6,
        2, 21, 6, 0, 8, 16, 6, 2, 24, 6, 0, 8, 17, 18, 6, 0, 8, 16, 6, 1, 24, 32, 18, 6, 0, 8, 8,
        16, 6, 2, 24, 18, 6, 42, 6, 0, 8, 8, 17, 6, 1, 24, 17, 2, 6, 0, 8, 16, 6, 1, 24, 17, 6, 0,
        8, 16, 6, 2, 24, 17, 6, 0, 8, 16, 6, 0, 8, 17, 24, 22, 6, 0, 8, 32, 18, 4, 6, 0, 6, 3, 21,
        6, 0, 8, 16, 6, 2, 24, 6, 0, 8, 17, 18, 6, 0, 8, 16, 6, 1, 24, 32, 18, 6, 0, 8, 8, 16, 6,
        3, 24, 18, 6, 0, 8, 8, 8, 17, 32, 18, 6, 0, 8, 8, 17, 17, 6, 0, 8, 8, 17, 6, 2, 24, 6, 1,
        23, 17, 24, 6, 216, 5, 6, 0, 8, 8, 8, 17, 6, 2, 24, 17, 6, 0, 8, 8, 17, 17, 23, 17, 6, 0,
        6, 1, 21, 6, 0, 8, 16, 6, 1, 24, 32, 18, 6, 192, 6, 11, 4, 6, 0, 6, 1, 22, 6, 0, 8, 8, 17,
        17, 6, 1, 23, 6, 0, 8, 8, 17, 32, 18, 6, 133, 4, 6, 0, 8, 16, 6, 1, 24, 17, 6, 0, 8, 16, 6,
        2, 24, 17, 6, 0, 8, 16, 6, 0, 8, 17, 24, 22, 6, 0, 8, 32, 18, 4, 6, 0, 6, 2, 21, 6, 0, 8,
        16, 6, 2, 24, 6, 0, 8, 17, 18, 6, 0, 8, 16, 6, 1, 24, 32, 18, 6, 0, 8, 8, 16, 6, 2, 24, 18,
        6, 0, 8, 8, 17, 6, 2, 24, 17, 6, 0, 8, 8, 17, 6, 2, 24, 6, 1, 23, 17, 6, 0, 6, 2, 21, 6, 0,
        8, 16, 6, 1, 24, 32, 18, 6, 0, 8, 16, 6, 2, 24, 32, 18, 6, 332, 6, 90, 4, 6, 0, 6, 2, 22,
        6, 0, 6, 1, 21, 6, 0, 8, 16, 6, 1, 24, 6, 10, 18, 6, 0, 16, 6, 1, 24, 6, 1, 6, 0, 6, 2, 21,
        6, 0, 8, 16, 6, 1, 24, 32, 18, 6, 0, 8, 16, 6, 2, 24, 32, 18, 6, 388, 6, 90, 4, 6, 0, 6, 2,
        22, 6, 0, 8, 16, 6, 1, 24, 17, 6, 0, 8, 16, 6, 2, 24, 17, 6, 0, 8, 16, 6, 0, 8, 17, 24, 22,
        6, 0, 8, 32, 18, 4, 6, 0, 6, 5, 21, 6, 0, 8, 16, 6, 2, 24, 6, 0, 8, 17, 18, 6, 0, 8, 16, 6,
        1, 24, 32, 18, 6, 0, 8, 8, 16, 6, 5, 24, 18, 6, 0, 6, 13, 21, 6, 0, 8, 16, 6, 13, 24, 6,
        104, 18, 6, 0, 8, 16, 6, 12, 24, 6, 101, 18, 6, 0, 8, 16, 6, 11, 24, 6, 108, 18, 6, 0, 8,
        16, 6, 10, 24, 6, 108, 18, 6, 0, 8, 16, 6, 9, 24, 6, 111, 18, 6, 0, 8, 16, 6, 8, 24, 6, 44,
        18, 6, 0, 8, 16, 6, 7, 24, 6, 32, 18, 6, 0, 8, 16, 6, 6, 24, 6, 119, 18, 6, 0, 8, 16, 6, 5,
        24, 6, 111, 18, 6, 0, 8, 16, 6, 4, 24, 6, 114, 18, 6, 0, 8, 16, 6, 3, 24, 6, 108, 18, 6, 0,
        8, 16, 6, 2, 24, 6, 100, 18, 6, 0, 8, 16, 6, 1, 24, 6, 33, 18, 6, 0, 16, 6, 13, 24, 6, 13,
        6, 0, 8, 8, 17, 6, 1, 23, 6, 1, 23, 32, 18, 6, 0, 8, 8, 17, 6, 1, 23, 32, 18, 6, 0, 8, 8,
        17, 6, 1, 23, 17, 6, 0, 8, 8, 17, 6, 1, 23, 6, 1, 23, 17, 6, 0, 6, 2, 21, 6, 0, 8, 16, 6,
        1, 24, 32, 18, 6, 0, 8, 16, 6, 2, 24, 32, 18, 6, 675, 6, 248, 4, 6, 0, 6, 2, 22, 6, 0, 8,
        8, 16, 6, 1, 24, 17, 6, 0, 8, 16, 6, 2, 24, 17, 6, 0, 8, 16, 6, 0, 8, 17, 24, 22, 6, 0, 8,
        32, 18, 0,
    ];

    let mut vec8: Vec<u8> = vec![0;hello.len()*8];
    BigEndian::write_u64_into(&hello, &mut vec8);

    println!("Writing hello.bin: {} bytes", vec8.len());
    fs::write("hello.bin", vec8).expect("Writing hello.bin failed");
}

fn main() {

    write_hello_bin();

    let data: Vec<u8> = fs::read("hello.bin").expect("Unable to read file");
    println!("Read: {} bytes", data.len());
    let mut flat: Vec<u64> = vec![0;data.len()/8];
    BigEndian::read_u64_into(&data, &mut flat);

    //println!("Start");

    let sharp: formats::Process = formats::d(&flat);

    let mut instance = container::Container::new(sharp);
    instance.add_func(42, print42);
    instance.run_io();

    //println!("Done.");
}
